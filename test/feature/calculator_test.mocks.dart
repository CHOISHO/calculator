// Mocks generated by Mockito 5.4.4 from annotations
// in cli/test/calculator_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:cli/feature/calculator.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCalculator_0 extends _i1.SmartFake implements _i2.Calculator {
  _FakeCalculator_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Calculator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalculator extends _i1.Mock implements _i2.Calculator {
  @override
  _i2.Calculator get calculator => (super.noSuchMethod(
        Invocation.getter(#calculator),
        returnValue: _FakeCalculator_0(
          this,
          Invocation.getter(#calculator),
        ),
        returnValueForMissingStub: _FakeCalculator_0(
          this,
          Invocation.getter(#calculator),
        ),
      ) as _i2.Calculator);

  @override
  set calculator(_i2.Calculator? _calculator) => super.noSuchMethod(
        Invocation.setter(
          #calculator,
          _calculator,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String calculate(List<String>? arguments) => (super.noSuchMethod(
        Invocation.method(
          #calculate,
          [arguments],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #calculate,
            [arguments],
          ),
        ),
        returnValueForMissingStub: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #calculate,
            [arguments],
          ),
        ),
      ) as String);

  @override
  num add(
    dynamic a,
    dynamic b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #add,
          [
            a,
            b,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  num subtract(
    dynamic a,
    dynamic b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #subtract,
          [
            a,
            b,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  num multiply(
    dynamic a,
    dynamic b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #multiply,
          [
            a,
            b,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);

  @override
  num divide(
    dynamic a,
    dynamic b,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #divide,
          [
            a,
            b,
          ],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as num);
}
